from django.core.validators import RegexValidator


validate_slug = RegexValidator(
    regex=r'[a-z0-9-]+',
    message='The slug may only contain lower case letters (a–z), numbers (0–9) and dashes (-).'
)

validate_path = RegexValidator(
    regex=r'[a-z0-9-/]+',
    message='The path may only contain lower case letters (a–z), numbers (0–9), dashes (-) and forward slashes (/).'
)


class CommonFields(object):
    path = dict(
        max_length=1023,
        validators=[validate_path],
        verbose_name='Path',
        help_text='Will be automatically determined from parent and slug.',
        unique=True,
    )

    slug = dict(
        blank=True,  # actually not, but autogenerated anyway
        max_length=255,
        validators=[validate_slug],
        verbose_name='Slug',
        help_text=(
            'The slug will be included as part of the URL. '
            'The slug may only contain lower case letters (a–z), numbers (0–9) and dashes (-). '
            'If you leave the slug blank, it will be generated from the title. '
            'If you change the slug after publishing, remember to create any redirects you may need.'
        ),
    )

    title = dict(
        max_length=1023,
        verbose_name='Title',
        help_text='The title will be displayed at the top of the view.',
    )

    description = dict(
        verbose_name='Description',
        help_text=(
            'While the description is not usually displayed in the user interface, '
            'it is visible to search engines and RSS readers. If your item contains '
            'text content, a good practice is to make the description a short summary '
            'of the content.'
        ),
        blank=True,
        default='',
    )

    order = dict(
        default=0,
        verbose_name='Ordering',
        help_text=(
            'The child items of a common parent are ordered in an ascending order by this number '
            '(smallest first).'
        )
    )

    is_public = dict(
        default=True,
        verbose_name='Public',
        help_text='Items that are not public are only accessible to admin users.',
    )

    is_visible = dict(
        default=True,
        verbose_name='Visible',
        help_text='Items that are not visible are not displayed in listings, but they can still be accessed via exact URL.',
    )
