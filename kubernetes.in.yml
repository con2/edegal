# Edegal deployment using Kubernetes
# usage: emrichen kubernetes.in.yml | kubectl apply -n edegal -f -

!Defaults
public_hostname: edegal.127.0.0.1.xip.io
tag: staging
image: !Format conikuvat/edegal:{tag}
static_image: !Format conikuvat/edegal-static:{tag}

# Common environment vars for both edegal and celery pods.
common_environment:
  - name: POSTGRESQL_HOSTNAME
    value: postgres
  - name: POSTGRESQL_DATABASE
    value: edegal
  - name: POSTGRESQL_USERNAME
    valueFrom:
      secretKeyRef:
        name: postgres
        key: username
  - name: POSTGRESQL_PASSWORD
    valueFrom:
      secretKeyRef:
        name: postgres
        key: password
  - name: RABBITMQ_HOSTNAME
    value: rabbitmq
  - name: RABBITMQ_VHOST
    value: edegal
  - name: RABBITMQ_USERNAME
    valueFrom:
      secretKeyRef:
        name: rabbitmq
        key: username
  - name: RABBITMQ_PASSWORD
    valueFrom:
      secretKeyRef:
        name: rabbitmq
        key: password
  - name: SECRET_KEY
    valueFrom:
      secretKeyRef:
        name: edegal
        key: secretKey
  - name: ALLOWED_HOSTS
    value: "*"


#############
# MEMCACHED #
#############
---
apiVersion: v1
kind: Service
metadata:
  name: memcached
  labels:
    app: edegal
    service: memcached
spec:
  ports:
  - port: 6379
    targetPort: 6379
  selector:
    app: edegal
    service: memcached

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: memcached
spec:
  selector:
    matchLabels:
      app: edegal
      service: memcached
  replicas: 1
  template:
    metadata:
      labels:
        app: edegal
        service: memcached
    spec:
      containers:
      - name: master
        image: memcached
        resources: {}
        ports:
        - containerPort: 6379


############
# RABBITMQ #
############
---
apiVersion: v1
kind: Service
metadata:
  name: rabbitmq
  labels:
    app: edegal
    service: rabbitmq
spec:
  ports:
  - port: 5672
    targetPort: 5672
  selector:
    app: edegal
    service: rabbitmq

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rabbitmq
spec:
  selector:
    matchLabels:
      app: edegal
      service: rabbitmq
  replicas: 1
  template:
    metadata:
      labels:
        app: edegal
        service: rabbitmq
    spec:
      containers:
      - name: master
        image: rabbitmq
        resources: {}
        ports:
        - containerPort: 5672
        env:
        - name: RABBITMQ_DEFAULT_VHOST
          value: edegal
        - name: RABBITMQ_DEFAULT_PASS
          valueFrom:
            secretKeyRef:
              name: rabbitmq
              key: password
        - name: RABBITMQ_DEFAULT_USER
          valueFrom:
            secretKeyRef:
              name: rabbitmq
              key: username
        volumeMounts:
        - mountPath: /var/lib/rabbitmq
          name: rabbitmq-data
      volumes:
      - name: rabbitmq-data
        persistentVolumeClaim:
          claimName: rabbitmq-data

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app: edegal
    service: rabbitmq
  name: rabbitmq-data
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 1000Mi

---
apiVersion: v1
kind: Secret
metadata:
  name: rabbitmq
  labels:
    app: edegal
    service: rabbitmq
  annotations:
    secret-generator.v1.mittwald.de/autogenerate: password
type: Opaque
data:
  username: !Base64 edegal


##############
# POSTGRESQL #
##############
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  labels:
    app: edegal
    service: postgres
spec:
  ports:
  - port: 5432
    targetPort: 5432
  selector:
    app: edegal
    service: postgres

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
spec:
  selector:
    matchLabels:
      app: edegal
      service: postgres
  replicas: 1
  template:
    metadata:
      labels:
        app: edegal
        service: postgres
    spec:
      containers:
      - name: master
        image: postgres
        resources: {}
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: edegal
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgres
              key: username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres
              key: password
        volumeMounts:
        - mountPath: /var/lib/postgresql/data
          name: postgres-data
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - edegal
          initialDelaySeconds: 3
          periodSeconds: 3
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - edegal
          initialDelaySeconds: 30
          periodSeconds: 30
      volumes:
      - name: postgres-data
        persistentVolumeClaim:
          claimName: postgres-data

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app: edegal
    service: postgres
  name: postgres-data
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 1000Mi

---
apiVersion: v1
kind: Secret
metadata:
  name: postgres
  labels:
    app: edegal
    service: postgres
  annotations:
    secret-generator.v1.mittwald.de/autogenerate: password
type: Opaque
data:
  username: !Base64 edegal


#########################
# GUNICORN (Web server) #
#########################
---
apiVersion: v1
kind: Service
metadata:
  name: edegal
  labels:
    app: edegal
    service: edegal
spec:
  ports:
  - port: 80
    targetPort: 8000
  selector:
    app: edegal
    service: edegal

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: edegal
spec:
  selector:
    matchLabels:
      app: edegal
      service: edegal
  replicas: 1
  template:
    metadata:
      labels:
        app: edegal
        service: edegal
    spec:
      securityContext:
        fsGroup: 1082
      containers:
      - name: master
        image: !Var image
        resources: {}
        ports:
        - containerPort: 8000
        env: !Var common_environment
        volumeMounts:
        - mountPath: /usr/src/app/media
          name: edegal-media
      volumes:
      - name: edegal-media
        persistentVolumeClaim:
          claimName: edegal-media

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app: edegal
    service: edegal
  name: edegal-media
spec:
  accessModes:
  - ReadWriteMany
  resources:
    requests:
      storage: 1000Mi

---
apiVersion: v1
kind: Secret
metadata:
  name: edegal
  labels:
    app: edegal
  annotations:
    secret-generator.v1.mittwald.de/autogenerate: secretKey
type: Opaque
data: {}


##############################
# CELERY (Background worker) #
##############################
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: celery
spec:
  selector:
    matchLabels:
      app: edegal
      service: celery
  replicas: 1
  template:
    metadata:
      labels:
        app: edegal
        service: celery
    spec:
      securityContext:
        fsGroup: 1082
      containers:
      - name: master
        image: !Var image
        args: ["celery", "-A", "edegal_site.celery:app", "worker"]
        resources: {}
        env: !Var common_environment
        volumeMounts:
        - mountPath: /usr/src/app/media
          name: edegal-media
      volumes:
      - name: edegal-media
        persistentVolumeClaim:
          claimName: edegal-media

###############################
# NGINX (Static file serving) #
###############################
---
apiVersion: v1
kind: Service
metadata:
  name: nginx
  labels:
    app: edegal
    service: nginx
spec:
  ports:
  - port: 80
    targetPort: 80
  selector:
    app: edegal
    service: nginx

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
spec:
  selector:
    matchLabels:
      app: edegal
      service: nginx
  replicas: 1
  template:
    metadata:
      labels:
        app: edegal
        service: nginx
    spec:
      containers:
      - name: master
        image: !Var static_image
        resources: {}
        ports:
        - containerPort: 80
        volumeMounts:
        - mountPath: /usr/share/nginx/html/media
          name: edegal-media
      volumes:
      - name: edegal-media
        persistentVolumeClaim:
          claimName: edegal-media


###########
# INGRESS #
###########
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: edegal
spec:
  rules:
    - host: !Var public_hostname
      http:
        paths:
        - path: /api
          backend:
            serviceName: edegal
            servicePort: 80
        - path: /admin
          backend:
            serviceName: edegal
            servicePort: 80
        - path: /oauth
          backend:
            serviceName: edegal
            servicePort: 80
        - path: /
          backend:
            serviceName: nginx
            servicePort: 80
